{"ast":null,"code":"var _jsxFileName = \"/home/nilson/Dropbox/repositories/reactjs/huntweb/src/pages/main/index.js\";\nimport React, { Component } from \"react\"; // Importando configuração da API\n\nimport api from \"../../services/api\";\nexport default class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: []\n    };\n\n    this.loadProducts = async () => {\n      // Chamando a API\n      const response = await api.get(\"/products\");\n      this.setState({\n        products: response.data.docs\n      });\n    };\n  }\n\n  // Método de Ciclo\n  // Chamado assim que o componente é montado em tela  \n  componentDidMount() {\n    // Named Function                            \n    this.loadProducts(); // Modelo de função que pode ser usado com método pertencentes ao React\n  } //Funções do desenvolvedor deverão ser criadas com o modelo Arrow Function\n  // Necessário para não sobrescrever o valor do this\n\n\n  // Sempre que houver uma variável no state o método render vai ficar escutando as alterações realizadas\n  render() {\n    return React.createElement(\"div\", {\n      className: \"product-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, this.state.products.map(product => React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, product.title)));\n  }\n\n}","map":{"version":3,"sources":["/home/nilson/Dropbox/repositories/reactjs/huntweb/src/pages/main/index.js"],"names":["React","Component","api","Main","state","products","loadProducts","response","get","setState","data","docs","componentDidMount","render","map","product","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,eAAe,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAIxCG,KAJwC,GAIhC;AACJC,MAAAA,QAAQ,EAAE;AADN,KAJgC;;AAAA,SAgBxCC,YAhBwC,GAgBzB,YAAY;AACvB;AACA,YAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAJ,CAAQ,WAAR,CAAvB;AAEA,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,QAAQ,EAAEE,QAAQ,CAACG,IAAT,CAAcC;AAA1B,OAAd;AACH,KArBuC;AAAA;;AAQxC;AACA;AACAC,EAAAA,iBAAiB,GAAG;AAAE;AAClB,SAAKN,YAAL,GADgB,CACK;AACxB,GAZuC,CAcxC;AACA;;;AAQA;AACAO,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKT,KAAL,CAAWC,QAAX,CAAoBS,GAApB,CAAwBC,OAAO,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,OAAO,CAACC,KAAb,CADH,CADL,CADJ;AAOH;;AAhCuC","sourcesContent":["import React, { Component } from \"react\";\n// Importando configuração da API\nimport api from \"../../services/api\";\n\nexport default class Main extends Component {\n    // Utilizado para armazenar os dados recuperados da API\n    // O método render irá depender das variáveis do state para apresentar os dados\n    // Não usar variáveis comuns\n    state = {\n        products: []\n    };\n\n    // Método de Ciclo\n    // Chamado assim que o componente é montado em tela  \n    componentDidMount() { // Named Function                            \n        this.loadProducts(); // Modelo de função que pode ser usado com método pertencentes ao React\n    }\n    \n    //Funções do desenvolvedor deverão ser criadas com o modelo Arrow Function\n    // Necessário para não sobrescrever o valor do this\n    loadProducts = async () => { \n        // Chamando a API\n        const response = await api.get(\"/products\");           \n        \n        this.setState({ products: response.data.docs });\n    };\n\n    // Sempre que houver uma variável no state o método render vai ficar escutando as alterações realizadas\n    render() {\n        return (\n            <div className=\"product-list\">\n                {this.state.products.map(product => (\n                    <h2>{product.title}</h2>\n                ))}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}