{"ast":null,"code":"import _objectWithoutProperties from \"/home/nilson/Dropbox/repositories/reactjs/huntweb/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/nilson/Dropbox/repositories/reactjs/huntweb/src/pages/main/index.js\";\nimport React, { Component } from \"react\"; // Importando configuração da API\n\nimport api from \"../../services/api\"; // Importando o CSS\n\nimport \"./styles.css\";\nexport default class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      productsInfo: {},\n      page: 1\n    };\n\n    this.loadProducts = async (page = 1) => {\n      // Chamando a API\n      const response = await api.get(\"/products?page=${page}\"); // Armazena os valores em docs e todo resto em um objeto productInfo\n\n      const _response$data = response.data,\n            docs = _response$data.docs,\n            productInfo = _objectWithoutProperties(_response$data, [\"docs\"]); //Armazenando os valores em state\n\n\n      this.setState({\n        products: docs,\n        productInfo\n      });\n    };\n\n    this.prevPage = () => {};\n\n    this.nextPage = () => {\n      // Recebe os valores de state\n      const _this$state = this.state,\n            page = _this$state.page,\n            productInfo = _this$state.productInfo; // Verifica se está na última página para interromper a função\n\n      if (page === productInfo.pages) return; // Caso não seja a página final será adicionado 1 a váriavel page e atribuida em pageNumber\n\n      const pageNumber = page + 1; // Chama o loadProducts com o novo valor da página\n\n      this.loadProducts(pageNumber);\n    };\n  }\n\n  // Método de Ciclo\n  // Chamado assim que o componente é montado em tela  \n  componentDidMount() {\n    // Named Function                            \n    this.loadProducts(); // Modelo de função que pode ser usado com método pertencentes ao React\n  } //Funções do desenvolvedor deverão ser criadas com o modelo Arrow Function\n  // Necessário para não sobrescrever o valor do this\n\n\n  // Sempre que houver uma variável no state o método render vai ficar escutando as alterações realizadas\n  render() {\n    const products = this.state.products;\n    return React.createElement(\"div\", {\n      className: \"product-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, products.map(product => React.createElement(\"article\", {\n      key: product._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, product.title), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, product.description), React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Acessar\"))), React.createElement(\"div\", {\n      className: \"actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.prevPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Anterior\"), React.createElement(\"button\", {\n      onClick: this.nextPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Pr\\xF3ximo\")));\n  }\n\n}","map":{"version":3,"sources":["/home/nilson/Dropbox/repositories/reactjs/huntweb/src/pages/main/index.js"],"names":["React","Component","api","Main","state","products","productsInfo","page","loadProducts","response","get","data","docs","productInfo","setState","prevPage","nextPage","pages","pageNumber","componentDidMount","render","map","product","_id","title","description"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,GAAP,MAAgB,oBAAhB,C,CACA;;AACA,OAAO,cAAP;AAEA,eAAe,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAIxCG,KAJwC,GAIhC;AACJC,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,YAAY,EAAE,EAFV;AAGJC,MAAAA,IAAI,EAAE;AAHF,KAJgC;;AAAA,SAkBxCC,YAlBwC,GAkBzB,OAAOD,IAAI,GAAG,CAAd,KAAoB;AAC/B;AACA,YAAME,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAJ,CAAQ,wBAAR,CAAvB,CAF+B,CAG/B;;AAH+B,6BAIED,QAAQ,CAACE,IAJX;AAAA,YAIvBC,IAJuB,kBAIvBA,IAJuB;AAAA,YAIdC,WAJc,uDAK/B;;;AACA,WAAKC,QAAL,CAAc;AAAET,QAAAA,QAAQ,EAAEO,IAAZ;AAAkBC,QAAAA;AAAlB,OAAd;AACH,KAzBuC;;AAAA,SA2BxCE,QA3BwC,GA2B7B,MAAM,CAAE,CA3BqB;;AAAA,SA6BxCC,QA7BwC,GA6B7B,MAAM;AACb;AADa,0BAEiB,KAAKZ,KAFtB;AAAA,YAELG,IAFK,eAELA,IAFK;AAAA,YAECM,WAFD,eAECA,WAFD,EAGb;;AACA,UAAGN,IAAI,KAAKM,WAAW,CAACI,KAAxB,EAA+B,OAJlB,CAKb;;AACA,YAAMC,UAAU,GAAGX,IAAI,GAAG,CAA1B,CANa,CAOb;;AACA,WAAKC,YAAL,CAAkBU,UAAlB;AACH,KAtCuC;AAAA;;AAUxC;AACA;AACAC,EAAAA,iBAAiB,GAAG;AAAE;AAClB,SAAKX,YAAL,GADgB,CACK;AACxB,GAduC,CAgBxC;AACA;;;AAuBA;AACAY,EAAAA,MAAM,GAAG;AAAA,UACGf,QADH,GACgB,KAAKD,KADrB,CACGC,QADH;AAGL,WACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,QAAQ,CAACgB,GAAT,CAAaC,OAAO,IACjB;AAAS,MAAA,GAAG,EAAEA,OAAO,CAACC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASD,OAAO,CAACE,KAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,OAAO,CAACG,WAAZ,CAFJ,EAII;AAAG,MAAA,IAAI,EAAC,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,CADH,CADL,EASI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,KAAKV,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAQ,MAAA,OAAO,EAAE,KAAKC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CATJ,CADJ;AAgBH;;AA5DuC","sourcesContent":["import React, { Component } from \"react\";\n// Importando configuração da API\nimport api from \"../../services/api\";\n// Importando o CSS\nimport \"./styles.css\"\n\nexport default class Main extends Component {\n    // Utilizado para armazenar os dados recuperados da API\n    // O método render irá depender das variáveis do state para apresentar os dados\n    // Não usar variáveis comuns\n    state = {\n        products: [],\n        productsInfo: {},\n        page: 1,\n    };\n\n    // Método de Ciclo\n    // Chamado assim que o componente é montado em tela  \n    componentDidMount() { // Named Function                            \n        this.loadProducts(); // Modelo de função que pode ser usado com método pertencentes ao React\n    }\n    \n    //Funções do desenvolvedor deverão ser criadas com o modelo Arrow Function\n    // Necessário para não sobrescrever o valor do this\n    loadProducts = async (page = 1) => { \n        // Chamando a API\n        const response = await api.get(\"/products?page=${page}\");           \n        // Armazena os valores em docs e todo resto em um objeto productInfo\n        const { docs, ...productInfo } = response.data;\n        //Armazenando os valores em state\n        this.setState({ products: docs, productInfo });\n    };\n\n    prevPage = () => {};\n\n    nextPage = () => {\n        // Recebe os valores de state\n        const { page, productInfo } = this.state;\n        // Verifica se está na última página para interromper a função\n        if(page === productInfo.pages) return;\n        // Caso não seja a página final será adicionado 1 a váriavel page e atribuida em pageNumber\n        const pageNumber = page + 1;\n        // Chama o loadProducts com o novo valor da página\n        this.loadProducts(pageNumber);\n    };\n\n    // Sempre que houver uma variável no state o método render vai ficar escutando as alterações realizadas\n    render() {\n        const { products } = this.state;\n\n        return (            \n            <div className=\"product-list\">\n                {products.map(product => (\n                    <article key={product._id}>\n                        <strong>{product.title}</strong>\n                        <p>{product.description}</p>\n\n                        <a href=\"\">Acessar</a>\n                    </article>\n                ))}\n                <div className=\"actions\">\n                    <button onClick={this.prevPage}>Anterior</button>                \n                    <button onClick={this.nextPage}>Próximo</button>\n                </div>\n            </div>            \n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}